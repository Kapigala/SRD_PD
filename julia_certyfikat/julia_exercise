{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zadanie 1.\n",
    "\n",
    "Napisz program, który wyszukuje największy wspólny dzielnik dwóch liczb $a$ i $b$. \n",
    "\n",
    "*Wskazówka*: warto w tym przypadku zastosować rekurencję."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 109] - NWD 1\n",
      "[119, 6] - NWD 1\n",
      "[82, 140] - NWD 2\n",
      "[13, 97] - NWD 1\n",
      "[100, 73] - NWD 1\n",
      "[14, 183] - NWD 1\n",
      "[192, 26] - NWD 2\n",
      "[127, 164] - NWD 1\n",
      "[160, 176] - NWD 16\n",
      "[160, 36] - NWD 4\n",
      "[150, 120] - NWD 30\n",
      "[41, 199] - NWD 1\n",
      "[59, 39] - NWD 1\n",
      "[82, 149] - NWD 1\n",
      "[109, 129] - NWD 1\n",
      "[103, 13] - NWD 1\n",
      "[77, 32] - NWD 1\n",
      "[73, 116] - NWD 1\n",
      "[146, 7] - NWD 1\n",
      "[99, 1] - NWD 1\n",
      "[77, 144] - NWD 1\n",
      "[98, 162] - NWD 2\n",
      "[175, 168] - NWD 7\n",
      "[183, 181] - NWD 1\n",
      "[145, 52] - NWD 1\n",
      "[140, 150] - NWD 10\n",
      "[75, 27] - NWD 3\n",
      "[38, 84] - NWD 2\n",
      "[81, 120] - NWD 3\n",
      "[74, 20] - NWD 2\n",
      "[7, 136] - NWD 1\n",
      "[109, 3] - NWD 1\n",
      "[160, 99] - NWD 1\n",
      "[134, 5] - NWD 1\n",
      "[79, 114] - NWD 1\n",
      "[5, 147] - NWD 1\n",
      "[78, 192] - NWD 6\n",
      "[110, 189] - NWD 1\n",
      "[58, 1] - NWD 1\n",
      "[36, 7] - NWD 1\n",
      "[197, 106] - NWD 1\n",
      "[109, 123] - NWD 1\n",
      "[52, 44] - NWD 4\n",
      "[79, 130] - NWD 1\n",
      "[87, 57] - NWD 3\n",
      "[92, 179] - NWD 1\n",
      "[94, 189] - NWD 1\n",
      "[69, 17] - NWD 1\n",
      "[3, 5] - NWD 1\n",
      "[159, 76] - NWD 1\n"
     ]
    }
   ],
   "source": [
    "using Random\n",
    "Random.seed!(116772)\n",
    "# Do rozwiązania zadania zastosowany zostanie algorytm Euklidesa \n",
    "function NWD(x,y)\n",
    "    a = max(x,y)\n",
    "    b = min(x,y)\n",
    "while b ≠ 0\n",
    "    r = mod(a,b)\n",
    "    a = b\n",
    "    b = r\n",
    "end\n",
    "a\n",
    "end\n",
    "\n",
    "#TEST\n",
    "for i in 1:50\n",
    "liczby=rand(1:200,2)\n",
    "print(liczby,\" - NWD \")\n",
    "println(NWD(liczby[1],liczby[2]))\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zadanie 2.\n",
    "    \n",
    "Napisz funkcję, która dla dowolnego ciągu znaków sprawdzi czy jest on [palindromem](https://pl.wikipedia.org/wiki/Palindrom)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kajak to palindrom\n",
      "maslo to nie palindrom\n",
      "drewno to nie palindrom\n",
      "anna to palindrom\n",
      "arbuz to nie palindrom\n",
      "sedes to palindrom\n",
      "kobyla ma maly bok to nie palindrom\n",
      "kobylamamalybok to palindrom\n"
     ]
    }
   ],
   "source": [
    "function palindrom(slowo ::String)\n",
    "    len = length(slowo)\n",
    "    for i in 1:(len/2)\n",
    "        if(slowo[Int(len-i+1)] != slowo[Int(i)])\n",
    "            println(slowo,\" to nie palindrom\")\n",
    "            return false\n",
    "        end\n",
    "    end\n",
    "    println(slowo,\" to palindrom\")\n",
    "    return true\n",
    "end\n",
    "\n",
    "#TEST\n",
    "lista_słów=[\"kajak\",\"maslo\",\"drewno\",\"anna\",\"arbuz\",\"sedes\",\"kobyla ma maly bok\",\"kobylamamalybok\"]\n",
    "for słowo in lista_słów\n",
    "    palindrom(słowo)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.7.2",
   "language": "julia",
   "name": "julia-1.7"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
